https://redis.io/commands/bitcount
http://www.redis.cn/commands/bitop.html

[offset是从左往右计数的，也就是从高位往低位]
设置一个key-value
键的名字叫“andy” ，值为字符'a’，‘a’的ASCII码是97。

转换为二进制是：01100001。
offset的学名叫做“偏移” ，二进制中的每一位就是offset值，


比如在这里offset 0 等于 ‘0’ ，offset 1等于’1’ ，offset2等于’1’，offset 6 等于’1’ 


setbit youKey offset value
​	
作用：将youKey 的第offset 位的值设置成value
getbit youKey offset
​作用：
获取youKey 的第offset位的值
offset从左向右，从0开始，如果offset位上没有bit值，返回0

bitcount youkey start end 
 //该命令统计字符串（字节）被设置为1的bit数
 只能统计字节，一个字节是8bit,也就是8个位置

bitcount 统计的是1的个数， 
bitcount youkey start end  

start 和 end 参数的设置和 GETRANGE 命令类似，都可以使用负数值：
	
比如 -1 表示最后一个位，而 -2 表示倒数第二个位，以此类推
bitcount 0 0 那么就应该是第一个字节中1的数量的，
 
        注意是字节 第一个字节也就是 0 1 2 3 4 5 6 7 这八个位置上。
bitcount 0 -1 所有的


1:Redis清空所有库数据
127.0.0.1:6379>flushall
Ok
2:append key value
127.0.0.1:6379> exists mykey   //生存：mykey
(integer) 0
127.0.0.1:6379> append mykey "hello"  //追加：mykey下 "hellp"
(integer) 5
127.0.0.1:6379> append mykey " world"	//追加：mykey下 " world"
(integer) 11
127.0.0.1:6379> get mykey //获得：mykey 值
"hello world"
127.0.0.1:6379>flushall	//清空所有数据库
Ok
127.0.0.1:6379> get mykey //在次获得:mykey 值
(nil)
127.0.0.1:6379> append ts "0043" //追加：ts下 "0043"
(integer) 4
127.0.0.1:6379> append ts "0035" //追加：ts下 "0035"
(integer) 8
127.0.0.1:6379> getrange ts 0 3 //获得:0~3范围的值
"0043"
127.0.0.1:6379> getrange ts 4 7
"0035"
127.0.0.1:6379> getrange ts 4 9
"0035"
127.0.0.1:6379> getrange ts 0 7
"00430035"
127.0.0.1:6379> getrange ts 0 7 //获得:0~7范围的值
"00430035"
127.0.0.1:6379> getrange ts 0 7
"00430035"
127.0.0.1:6379> append ts 1
(integer) 10
127.0.0.1:6379> getrange ts 0 8
"004300351"
127.0.0.1:6379> getrange ts 0 9
"0043003511"
127.0.0.1:6379> getrange ts 0 10
"0043003511"
127.0.0.1:6379> append ts 9
(integer) 11
127.0.0.1:6379> getrange ts 0 10
"00430035119"
127.0.0.1:6379> set mykey a	//设置mykey:值 a
OK
127.0.0.1:6379> get mykey
"a"
127.0.0.1:6379> setbit mykey 6 1 //将a的第6位设置成1
(integer) 0
127.0.0.1:6379> setbit mykey 7 0 //将a的第7位设置成0
(integer) 1
127.0.0.1:6379> get mykey //获得改变成 b
"b"
127.0.0.1:6379> set mykey 'a'
OK
127.0.0.1:6379> getbit mykey 0 //获得'a'第1位
(integer) 0
127.0.0.1:6379> getbit mykey 1 //获得'a'第2位
(integer) 1
127.0.0.1:6379> getbit mykey 2
(integer) 1
127.0.0.1:6379> getbit mykey 3
(integer) 0
127.0.0.1:6379> getbit mykey 4
(integer) 0
127.0.0.1:6379> getbit mykey 5
(integer) 0
127.0.0.1:6379> getbit mykey 6
(integer) 0
127.0.0.1:6379> getbit mykey 7 //获得'a'第8位
(integer) 1
127.0.0.1:6379> getbit mykey 8
(integer) 0
127.0.0.1:6379> bitcount mykey 0 7 //统计mykey 为1的个数
(integer) 3
127.0.0.1:6379> set key1 "foobar"
OK
127.0.0.1:6379> set key2 "abcdef"
OK
127.0.0.1:6379> bitop and dest key1 key2 //当 BITOP 处理不同长度的字符串时，较短的那个字符串所缺少的部分会被看作 0 
(integer) 6
127.0.0.1:6379> get dest //模式：使用 bitop 实现用户上线次数统计
"`bc`ab"
127.0.0.1:6379> set mykey "\xff\xf0\x00"
OK
127.0.0.1:6379> bitpos mykey 0 #查找字符串里面bit值为0的位置
(integer) 12
127.0.0.1:6379> set mykey "\x00\xff\xf0"
OK
127.0.0.1:6379> bitpos mykey 1 0 #查找字符串里面bit值为1从第0个字节开始的位置
(integer) 8
127.0.0.1:6379> bitpos mykey 1 2 #查找字符串里面bit值为1从第2个字节(12)开始的位置
(integer) 16
127.0.0.1:6379> set mykey "\x00\x00\x00"
OK
127.0.0.1:6379> bitpos mykey 1 #查找字符串里面bit值为1的位置
(integer) -1
(integer) -1
127.0.0.1:6379> set mykey "10" #对key对应的数字做减1操作 最大支持在64位有符号的整型数字
OK
127.0.0.1:6379> decr mykey
(integer) 9
127.0.0.1:6379> decr mykey
(integer) 8
127.0.0.1:6379> set mykey "10" #返回一个数字：减少之后的value值。
OK
127.0.0.1:6379> decrby mykey 5 #返回一个数字：减少之后的value值。
(integer) 5
127.0.0.1:6379> decrby mykey 2
(integer) 3
127.0.0.1:6379>setbit mykey 3 1 #设置mykey的第三位为1
(integer) 0
127.0.0.1:6379> getbit mykey 3
(integer) 1
127.0.0.1:6379> set mykey "this is a string" #substring
OK
127.0.0.1:6379> getrange mykey 0 3
"this"
127.0.0.1:6379> get range mykey 5 6
(error) ERR wrong number of arguments for 'get' command
127.0.0.1:6379> getrange mykey 5 6
"is"
127.0.0.1:6379> getrange mykey 8
(error) ERR wrong number of arguments for 'getrange' command
127.0.0.1:6379> getrange mykey 8 8
"a"
127.0.0.1:6379> getrange mykey 10 16
"string"
127.0.0.1:6379> getrange mykey -1 -6
""
127.0.0.1:6379> getrange mykey -6 -1 #-1最后一个字符
"string"
127.0.0.1:6379> incr mycounter #重置计数功能
(integer) 1
127.0.0.1:6379> getset mycounter "0"
"1"
127.0.0.1:6379> get mycounter
"0"
127.0.0.1:6379> set mykey "10" #对存储在指定key的数值执行原子的加1操作
OK
127.0.0.1:6379> incr mykey
(integer) 11
127.0.0.1:6379> get mykey
"11"
127.0.0.1:6379> set mykey "10" #将key对应的数字加decrement 增加之后的value值
OK
127.0.0.1:6379> incrby mykey 5
(integer) 15
127.0.0.1:6379> set mykey 10.50 #s设置mykey为10.50浮点数 可以精确到小数点后17位
OK
127.0.0.1:6379> incrbyfloat mykey 0.1 #过指定浮点数key来增长浮点数(存放于string中)的值
"10.6"
127.0.0.1:6379> set mykey 5.0e3
OK
127.0.0.1:6379> incrbyfloat mykey 2.0e2 
"5200"
127.0.0.1:6379> set key1 "hello"
OK
127.0.0.1:6379> set key2 "world"
OK
127.0.0.1:6379> mget key1 key2 nonexisting #返回所有指定的key的value。对于每个不对应string或者不存在的key，都返回特殊值nil。正因为此，这个操作从来不会失败
1) "hello"
2) "world"
3) (nil)
127.0.0.1:6379> mset key1 "hello" key2 "world" #对应给定的keys到他们相应的values上。MSET会用新的value替换已经存在的value，就像普通的SET命令一样
OK
127.0.0.1:6379> get key1
"hello"
127.0.0.1:6379> get key2
"world"
127.0.0.1:6379> msetnx key1 "hello" key2 "there"
(integer) 0
127.0.0.1:6379> msetnx key2 "there" key3 "world"
(integer) 0
127.0.0.1:6379> mget key1 key2 key3
1) "hello"
2) "world"
3) (nil)
127.0.0.1:6379> psetex mykey 10000 "hello"
OK
127.0.0.1:6379> pttl mykey
(integer) 6951
127.0.0.1:6379> pttl mykey
(integer) 2617
127.0.0.1:6379> get mykey
(nil)
127.0.0.1:6379> psetex mykey 100000 "hello"
OK
127.0.0.1:6379> pttl mykey
(integer) 95166
127.0.0.1:6379> get mykey
"hello"
127.0.0.1:6379> pttl mykey #当前还剩多少时间
(integer) 86427
127.0.0.1:6379> get mykey
"hello"
127.0.0.1:6379> get mykey
"hello"
127.0.0.1:6379> pttl mykey
(integer) 74865
127.0.0.1:6379> setbit mykey 7 1 #设置或者清空key的value(字符串)在offset处的bit值。
(integer) 0
127.0.0.1:6379> setbit mykey 7 0
(integer) 1
127.0.0.1:6379> get mykey
"\x00"
127.0.0.1:6379> setex mykey 10 "hello" #10秒过后mykey为nil，10秒内mykey值为hello
OK
127.0.0.1:6379> ttl mykey
(integer) 7
127.0.0.1:6379> get mykey
"hello"
127.0.0.1:6379> get mykey
(nil)
127.0.0.1:6379> setnx mykey "hello" #1 mykey被设置了
(integer) 1
127.0.0.1:6379> setnx mykey "world" #0 mykey没有被设置
(integer) 0
127.0.0.1:6379> get mykey
"hello"
127.0.0.1:6379> setnx dagsa "ddao"
(integer) 1
127.0.0.1:6379> setnx dagsa "www"  
(integer) 0
127.0.0.1:6379> set key1 "hello world" #这个命令的作用是覆盖key对应的string的一部分，从指定的offset处开始，覆盖value的长度
OK
127.0.0.1:6379> setrange key1 6 "redis" #该命令修改后的字符串长度
(integer) 11
127.0.0.1:6379> get key1
"hello redis"

127.0.0.1:6379> set mykey "hello world" 
OK
127.0.0.1:6379> strlen mykey #返回key的string类型value的长度。如果key对应的非string类型，就返回错误
(integer) 11
127.0.0.1:6379> strlen non #key对应的字符串value的长度，或者0（key不存在）
(integer) 0

127.0.0.1:6379> echo message #返回消息
"message"
127.0.0.1:6379> echo helloredis
"helloredis"

127.0.0.1:6379> ping #第一次PONG 订阅后empty这个命令经常用来测试一个连接是否还是可用的，或者用来测试一个连接的延时。
PONG
127.0.0.1:6379> ping "hello redis"
"hello redis"
127.0.0.1:6379>quit #请求服务器关闭连接。连接将会尽可能快的将未完成的客户端请求完成处理。 客服端退出
127.0.0.1:6379> select 1 #选择一个数据库，下标值从0开始，一个新连接默认连接的数据库是DB0。
OK
127.0.0.1:6379[1]> select 0 #选择一个数据库，下标值从0开始，一个新连接默认连接的数据库是DB0。
OK
127.0.0.1:6379> select 3
OK
127.0.0.1:6379[3]> select 100000
(error) ERR invalid DB index
127.0.0.1:6379> select 80
(error) ERR invalid DB index
127.0.0.1:6379> select 8
OK
127.0.0.1:6379[8]> select 50
(error) ERR invalid DB index
127.0.0.1:6379>
#起始版本：4.0.0
该命令可以交换同一Redis服务器上的两个DATABASE，可以实现连接某一数据库的连接立即访问到其他DATABASE的数据。访问交换前其他database的连接也可以访

#SWAPDB index index 该命令可以交换同一Redis服务器上的两个DATABASE，可以实现连接某一数据库的连接立即访问到其他DATABASE的数据。访问交换前其他database的连接也可以访问到该DATABASE的数据。 如：


#异步重写文件命令
127.0.0.1:6379> client getname
(nil)
127.0.0.1:6379> client setname "hsb"
OK
127.0.0.1:6379> client getname
"hsb"
127.0.0.1:6379> bgrewriteaof
Background append only file rewriting started
127.0.0.1:6379> bgsave
Background saving started
127.0.0.1:6379> lastsave
(integer) 1569073010

CLIENT ID 

起始版本：5.0.0
时间复杂度：O(1)
该命令返回当前连接的ID，每个ID符合如下约束：
永不重复。当调用命令CLIENT ID返回相同的值时，调用者可以确认原连接未被断开，只是被重用 ，因此仍可以认为是同一连接
ID值单调递增。若某一连接的ID值比其他连接的ID值大，可以确认该连接是较新创建的
该命令和同为Redis 5 新增的命令 CLIENT UNBLOCK一起使用，会有更好的效果。两条命令的使用格式参照CLIENT UNBLOCK说明页。
例子
redis> CLIENT ID
(integer) 3
redis> client list
